name: Deploy to Minikube (Remote VM)

on:
  workflow_run:
    workflows: ['Build and Test Inventory App']
    types: [completed]
  workflow_dispatch:  # Allows manual trigger if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install sshpass
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass

      - name: Test SSH Connection to VM (Using Password)
        run: |
          echo "Testing SSH Connection..."
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "echo 'SSH Connected Successfully!'"

      - name: Deploy to Minikube on Remote VM
        run: |
          echo "Starting deployment..."
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e  # Exit if any command fails

            echo "Switching to Minikube Docker"
            eval $(minikube docker-env)

            echo "Pulling latest Docker image..."
            docker pull lfrown/inventory-manager:latest || { echo "Docker pull failed"; exit 1; }

            echo "Applying Kubernetes configuration..."
            kubectl apply -f /Team4_k8s_App/deployment.yaml || { echo "Failed to apply deployment"; exit 1; }
            kubectl apply -f /Team4_k8s_App/service.yaml || { echo "Failed to apply service"; exit 1; }

            echo "Restarting deployment..."
            kubectl rollout restart deployment inventory-manager-deployment || { echo "Failed to restart deployment"; exit 1; }
          EOF

      - name: Get Minikube Service URL
        run: |
          echo "Fetching Minikube service URL..."
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "minikube service inventory-manager-service --url"
