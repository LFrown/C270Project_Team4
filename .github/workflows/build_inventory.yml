name: Build, Test, and Deploy Inventory App

on:
  push:
    branches:
      - branch11
  pull_request:
    branches:
      - branch11
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: docker build -t inventory-manager .

      - name: Run Tests - Integration Test
        run: docker run --rm inventory-manager python3 -m pytest tests/test_intergration_inventory_manager_base.py

      - name: Run Tests - Inventory Manager Test
        run: docker run --rm inventory-manager python3 -m pytest tests/test_inventory_manager.py

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: |
          docker tag inventory-manager lfrown/inventory-manager:latest
          docker push lfrown/inventory-manager:latest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup Kubernetes Config for Minikube
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Start Minikube (if needed)
        run: |
          minikube start --driver=none  # Uncomment this line if you need to start minikube in the CI pipeline
          
      - name: Test Kubernetes Connection
        run: kubectl get nodes

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f ansible/k8s/deployment.yaml
          kubectl apply -f ansible/k8s/service.yaml
          kubectl apply -f ansible/k8s/ingress.yaml
